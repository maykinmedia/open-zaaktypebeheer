name: Run CI

# Run this workflow every time a new commit pushed to your repository
on:
  push:
    branches:
      - main
      - stable/*
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

env:
  IMAGE_NAME: maykinmedia/open-zaaktypebeheer
  DJANGO_SETTINGS_MODULE: open_zaaktypebeheer.conf.ci
  DOCKER_BUILDKIT: '1'

jobs:
  backend-tests:
    name: Run the Django test suite
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: backend

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # Needed because the postgres container does not provide a healthcheck
        options:
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
          --name postgres
      redis:
        image: redis:6
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v3
      - name: Set up backend environment
        uses: maykinmedia/setup-django-backend@v1
        with:
          apt-packages: 'gettext postgresql-client'
          python-version: '3.10'
          optimize-postgres: 'yes'
          pg-service: 'postgres'
          setup-node: 'yes'
          npm-ci-flags: '--legacy-peer-deps'

      - name: Run tests
        run: |
          python src/manage.py compilemessages
          python src/manage.py collectstatic --noinput --link
          coverage run src/manage.py test src
        env:
          DJANGO_SETTINGS_MODULE: open_zaaktypebeheer.conf.ci
          SECRET_KEY: dummy
          DB_USER: postgres
          DB_PASSWORD: ''

      - name: Publish coverage report
        uses: codecov/codecov-action@v3

  docs:
   name: Build and check documentation
   runs-on: ubuntu-latest

   steps:
     - uses: actions/checkout@v3
       with:
         path: open-zaaktypebeheer

     - name: Set up backend environment
       uses: maykinmedia/setup-django-backend@v1
       with:
         apt-packages: 'gettext postgresql-client'
         python-version: '3.10'
         setup-node: 'no'
         working-directory: open-zaaktypebeheer/backend

     - name: Build and test docs
       run: pytest check_sphinx.py -v --tb=auto
       working-directory: open-zaaktypebeheer/backend/docs

  docker_build:
    name: Build Docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set tag
        id: vars
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name (if present at all)
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          # PRs result in version 'merge' -> transform that into 'latest'
          [ "$VERSION" == "merge" ] && VERSION=latest

          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "git_hash=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Build the production Docker image
        run: |
          docker build . \
            --tag $IMAGE_NAME:$RELEASE_VERSION \
            --build-arg COMMIT_HASH=${{ steps.vars.outputs.git_hash }} \
            --build-arg RELEASE=${{ steps.vars.outputs.tag }} \
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}

      - run: docker image save -o image.tar $IMAGE_NAME:${{ steps.vars.outputs.tag }}
      - name: Store image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: image.tar
          retention-days: 1

  docker_push:
    needs:
      - tests
      - docker_build

    name: Push Docker image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' # Exclude PRs

    steps:
      # This will include the updated OAS (if updated) from the update-oas job.
      - uses: actions/checkout@v3

      - name: Download built image
        uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Set tag
        id: vars
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name (if present at all)
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo "tag=${VERSION}" >> $GITHUB_OUTPUT

      - name: Load image
        run: |
          docker image load -i image.tar

      - name: Log into registry
        run:
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }}
          --password-stdin

      - name: Push the Docker image (production)
        run: docker push $IMAGE_NAME:$RELEASE_VERSION
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
